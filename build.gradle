/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

project.group = 'fr.esgi.projet.softwareneedsyou'
//project.version = '0.0.1'

allprojects {
    // Apply the java plugin to add support for Java
    apply plugin: 'java'

    // Apply the application plugin to add support for building an application
    apply plugin: 'application'

    // Support des IDEs
    //apply plugin: 'eclipse'
    //apply plugin: 'idea'

    // Plugins de test
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    manifest.mainAttributes(provider: 'gradle')

    // On spécifie la version de Java à utiliser
    sourceCompatibility = JavaVersion.VERSION_1_8 //1.8
    targetCompatibility = JavaVersion.VERSION_1_8 //1.8
}

project(':app') {
    version = '0.0.1-SNAPSHOT'
    description = 'The application'
    
    // Define the main class for the application
    mainClassName = 'fr.esgi.projet.softwareneedsyou.App'

    dependencies {
        compile project(':api')
    }

    jar {
        manifest {
            attributes 'Main-Class': "$mainClassName"
        }
    }
}

project(':api') {
    version = '0.0.1-SNAPSHOT'
    description = 'The shared API for the application'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    jcenter()
    // You can declare any Maven/Ivy/file repository here.
    //mavenCentral()
}

ext {
    lombockVersion = '1.16.+'

    //Logging
    // ...

    //Testing
    junitVersion = '4.+'
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    //compile 'com.google.guava:guava:20.0'

    // Use JUnit test framework
    testCompile "junit:junit:$junitVersion"
    
    compileOnly "org.projectlombok:lombok:$lombockVersion"
}

findbugs {
    toolVersion = "3.0.1" //pour compactibilité jre 1.7
    effort = "max"
    reportLevel = "low"
    ignoreFailures = true //sinon echec de la compilation
    reportsDir = file("${buildDir}/findbugsReports") //$project.buildDir
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

build.finalizedBy(jacocoTestReport) //pour exécuter automatique le test de couverture (avec junit) après la compilation

jacocoTestReport {
    group = "Reporting"
    description = "Générer un rapport de couverture de code (JAvaCOdeCOverage) après les tests"
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/jacocoHtml"
    }
    doFirst {
        sourceDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/tri/**Exception**'])
        })
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/tri/**Exception**'])
        })
    }
    afterEvaluate { //pas vraiment nécessaire avec doFirst
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/tri/**Exception**'])
        })
    }
}
